on: [push, pull_request]

jobs:
  windows:
    runs-on: windows-latest
    continue-on-error: false
    strategy:
      fail-fast: false
      matrix:
        php: ['8.2']
        ts: [nts]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true
      - name: Install PHP ${{ matrix.php }}
        uses: cmb69/setup-php-sdk@v0.6
        id: setup-php-sdk
        with:
          version: ${{ matrix.php }}
          arch: x64
          ts: ${{matrix.ts}}
      - name: Install dependencies
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64
          toolset: ${{steps.setup-php-sdk.outputs.toolset}}
      - name: Get igbinary repo
        run: git clone https://github.com/igbinary/igbinary D:\a\phpredis_m\pecl\igbinary
      - name: Build phpredis
        run: |
          phpize
          ./configure --enable-redis --with-prefix=${{steps.setup-php-sdk.outputs.prefix}}
          nmake
      - name: package
        run: |
          md binaries
          copy LICENSE binaries
          Get-ChildItem -Recurse -Filter "php_redis.dll" | ForEach-Object {Copy-Item -Path $_.FullName -Destination "binaries"}
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: redis-${{matrix.php}}-x64-${{matrix.ts}}
          path: binaries

  pecl:
    runs-on: ubuntu-latest
    container: php:8.2-cli-alpine
    steps:
      - name: Install required system packages
        run: apk add --update $PHPIZE_DEPS zstd-libs zstd-dev git
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true
      - name: Create temporary directory
        id: temp-dir
        run: printf "path=%s\n" "$(mktemp -d)" >>"$GITHUB_OUTPUT"
      - name: Create package
        run: |
          cd "${{ steps.temp-dir.outputs.path }}"
          pecl package "$GITHUB_WORKSPACE/package.xml"
      - name: Compile package
        run: printf '' | pecl install ${{ steps.temp-dir.outputs.path }}/redis-*.tgz
      - name: Enable extension
        run: docker-php-ext-enable redis
      - name: Check for PHP startup warnings
        run: |
          php -d display_errors=stderr -d display_startup_errors=1 -d error_reporting=-1 -r ';' 2>/tmp/php-startup-warnings
          if [ -s /tmp/php-startup-warnings ]; then
            echo 'The PHP extension was successfully installed, but PHP raised these warnings:' >&2
            cat /tmp/php-startup-warnings >&2
            exit 1
          fi
          echo "PHP didn't raise any warnings at startup."
      - name: Inspect extension
        run: php --ri redis
